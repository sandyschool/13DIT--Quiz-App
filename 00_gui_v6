"""This is a trivia quiz game app.

This quiz application allows users, (specifically high-school students)

to learn new fun facts and test their knowledge

on history and science questions!

Author- Sandy Baduge
"""

# Imports
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import json


class TriviaQuiz:
    """TriviaQuiz class to handle the quiz game logic and GUI."""

    def show_instructions(self, root):
        """Function to show instructions for the quiz game."""
        # Create a new window for instructions
        instructions = tk.Toplevel(root)
        instructions.title("Trivia Quiz Game Instructions")
        instructions.geometry("600x600")
        instructions.resizable(False, False)
        instructions.lift()  # Bring the instructions window to the front
        instructions.configure(bg="#EB925F")

        # Instruction text to be displayed.
        instructions_text = (
            "Welcome to Sandy's Trivia Quiz Game!\n\n"
            "Instructions:\n\n"
            "1. Click 'Start Quiz' to begin.\n\n"
            "2. Enter your name in the provided field.\n\n"
            "3. Select a topic, either 'Science' or 'History'.\n\n"
            "4. Click 'Submit' to begin.\n\n"
            "5. Answer the questions by selecting the correct option.\n\n"
            "6. You can skip a question if you're unsure by"
            "clicking 'Skip Question'.\n\n"
            "7. After answering all questions,"
            "your score will be displayed.\n\n"
            "8. You have 90 seconds to complete the quiz.\n\n"
            "9. The quiz consists of multiple-choice questions"
            "with 4 options each.\n\n"
            "10. Enjoy learning new facts and testing your knowledge!\n\n"
        )

        def on_start():
            instructions.destroy()
            self.root.deiconify()
        # Instructions will show up on window
        instruction_label = tk.Label(instructions, text=instructions_text, 
                                     font=("Verdana", 12), fg="black", bg="#EB925F", 
                                     justify="left", wraplength=600)
        instruction_label.pack(pady=(15, 20), padx=10)

        # Button to close the instructions window
        start_button= tk.Button(instructions , text="Start Quiz", 
                                command= on_start,font=("Open Sans", 14), 
                                bg="#E7973B", fg="black")
        start_button.pack(pady=15, anchor='center')

    # Main menu window
    def __init__(self, root):
        """Initialize the TriviaQuiz class."""
        self.root = root
        self.root.title("Trivia Quiz Game")
        self.root.geometry("600x600")
        root.withdraw()  # hide before show instructions function
        self.root.resizable(False, False)
        self.category = None
        self.background_image()
        self.main_menu()
        self.show_instructions(self.root)  # Show instructions when it starts


    # Background image for the main window
    def background_image(self):

        """Function to set the background image for the main window."""
        # Insert background image
        bg_image = Image.open("C:/Users/prasa/OneDrive/Desktop/Baduge, Sandy - " \
        "13DIT Project 91906/bg2.png")
        bg_image = bg_image.resize((600, 600))
        self.bg_photo = ImageTk.PhotoImage(bg_image, master=self.root)

        self.bg_label = tk.Label(self.root, image=self.bg_photo)
        self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)
        self.bg_label.lower()
        self.bg_label.place(x=0, y=0, relwidth=1, relheight=1) 

    # Main menu window to start quiz  
    def main_menu(self):
        """Function to create the main menu for the quiz game."""
        frame = tk.Frame(self.root, bg="#F3B976", bd=4, relief="groove")  
        frame.place(relx=0.5, rely=0.5, anchor='center', width=400, height=400)  # fixed size, centered

        # Title
        title_label = tk.Label(frame, text="Trivia Quiz", 
                               font=("Lucida Sans", 24), anchor="center", bg="#E28047")
        title_label.pack(pady=(10, 20), padx=10, fill='x')

        # Name entry of user
        name_label = tk.Label(frame, text="Enter your name:", bg="#E7973B", 
                              font=("Lucida Sans", 16), width=16, height=2)
        name_label.pack(pady=(20))

        self.name_entry = tk.Entry(frame, width=20, font=(16), validate='key')
        self.name_entry.pack(pady=(20, 10), padx=20, fill= 'x')

        # Submit button to start quiz
        submit_button = tk.Button(frame, text="Submit", font=("Lucida Sans", 14), 
                                  bg="#E7973B", command=self.enter_name)
        submit_button.pack(pady=(20, 10), padx= 20, fill='x')

        # Exit button
        quit_button = tk.Button(frame, text="Quit Game", command=self.root.destroy, 
                                font=("Lucida Sans", 14), bg="#E7973B", fg="black")
        quit_button.pack(pady=(20, 10), padx=20, fill='x')

    def enter_name(self):
        # Validate user input 
        name = self.name_entry.get().strip()
        if not name:
            messagebox.showwarning("Error! Name cannot be blank", 
                                   "Please enter your name!")
            return
        elif not name.isalpha() and not all(part.isalpha() for part in name.split()):
            messagebox.showwarning("Error!", 
                                   "Name must only contain letters!")
            return
        elif len(name) < 2:
            messagebox.showwarning("Error!", 
                                   "Name must be at least 2 characters long!")
            return
        elif len(name) > 16:
            messagebox.showwarning("Error!",
                                    "Name must be shorter than 16 characters!")
            return
        else:
            # Welcome user name
            messagebox.showinfo("Welcome!",
                                 f"Welcome to the Trivia Quiz Game {name}!")
            self.root.withdraw()
            self.select_category()  # Proceed to category selection
    
    def select_category(self):
        """Function to select a category for the quiz."""
        # Function for selecting a category
        self.category_window = tk.Toplevel(self.root)
        self.category_window.title("Select Category")
        self.category_window.geometry("400x400")
        self.category_window.resizable(False, False)
        self.category_window.configure(bg="#EBAA6D")

        # Inner frame to hold label + buttons, centered
        inner_frame = tk.Frame(self.category_window, bg="#F09063",  bd=2, relief="raised")
        inner_frame.place(relx=0.5, rely=0.5, anchor='center')
       
        # Category selection buttons
        tk.Label(inner_frame, text="Select category:", bg="#F09063", 
                 justify="center", font=("Open Sans", 14)).pack(pady=(0, 5))

        science_button = tk.Button(inner_frame, text="Science", bg="#F09063", 
                                   justify="center", font=("Open Sans", 14),fg='black', command=lambda: self.start_quiz("Science")) 
        science_button.pack(pady=5, fill='x')

        history_button = tk.Button(inner_frame, text="History", bg="#F09063", 
                                   justify="center", font=("Open Sans", 14),fg='black', command=lambda: self.start_quiz("History"))
        history_button.pack(pady=5, fill='x')
    
    def start_quiz(self, category):
        """Function to start the quiz based on the selected category."""
        # Function to start the quiz based on the selected category
        self.category = category
        self.category_window.destroy()  # Close the selection window

        # Load questions based on the selected category
        self.load_questions()

        # Quiz variables
        self.current_question = 0
        self.score = 0
        self.time_left = 80

        # Load questions
        self.user_quiz_window()
    
    def user_quiz_window(self):
        """Function to create the quiz window."""
        # Function to create the quiz window
        self.quiz_window = tk.Toplevel(self.root)
        self.quiz_window.title(f"{self.category} Quiz")
        self.quiz_window.geometry("700x600")
        self.quiz_window.resizable(False, False)
        self.quiz_window.configure(bg="#F3CE6A")

        # Top frame for question, and answer feedback
        top_frame = tk.Frame(self.quiz_window, bg="#F3CE6A", bd=2, relief="flat")
        top_frame.pack(fill="x", pady=10)

        # Middle frame for answer buttons
        middle_frame = tk.Frame(self.quiz_window, bg="#F3CE6A")
        middle_frame.pack(pady=5, fill="both", expand=True)

        # Option buttons for answers
        self.option_buttons = []
        for _ in range(4):  
            option_button = tk.Button(middle_frame, text="",
                                       font=("Open Sans", 12), width=30)
            option_button.pack(fill="x", padx=50, pady=5)
            self.option_buttons.append(option_button) 
        
        # Question label in center
        self.question_label = tk.Label(top_frame, text="", 
                                       font=("Arial", 16), wraplength=550)
        self.question_label.pack(pady=10)

        # Bottom frame for timer, score, and skip button
        bottom_frame = tk.Frame(self.quiz_window, bg="#F3CE6A", bd=2, relief="sunken")
        bottom_frame.pack(side="bottom", fill="x", pady=30)

        # Create a timer on top left corner
        self.timer_label = tk.Label(bottom_frame, text=f"Time left: {self.time_left}s", 
                                    font=("Open Sans", 14), bg="#F0E4C5")
        self.timer_label.pack(side="left", padx=10, pady=5)

        # Score label on top right corner
        self.score_label = tk.Label(bottom_frame, text=f"Score: {self.score}",
                                     font=("Open Sans", 14))
        self.score_label.pack(side="right", padx=10, pady=5)

        # Option to skip question
        self.skip_button = tk.Button(bottom_frame, text="Skip Question",
                                      font=("Open Sans", 14), command=lambda: self.check_answer("skip", None))
        self.skip_button.pack(side="left", expand=True)

        self.show_question()  
        self.update_timer()

    def load_questions_from_file(self, filename):
        """Function to load questions from a JSON file."""
        # Function to load questions from a JSON file
        with open(filename, "r") as file:
            # Load questions from the JSON file         
            self.questions = json.load(file)    
            
    def load_questions(self):
        """Function to load questions based on the selected category."""
        # Function to create the quiz window based on the selected category
        if self.category == "Science":
            # Load science questions and start the quiz
            self.load_questions_from_file(r"C:\Users\prasa\OneDrive\Desktop\Baduge, Sandy - 13DIT Project 91906\Science.json")
        elif self.category == "History":
            # Load history questions and start the quiz
            self.load_questions_from_file(r"C:\Users\prasa\OneDrive\Desktop\Baduge, Sandy - 13DIT Project 91906\History.json")
            
    def show_question(self):
        # Reset selection
        question_data = self.questions[self.current_question]
        self.question_label.config(text=question_data["question"])
       
        if self.current_question >= len(self.questions):
            return
        
        # Clear previous feedback
        question_data = self.questions[self.current_question]
        self.question_label.config(text=question_data["question"])

        options = question_data["options"]
        for i, option in enumerate(options):
            self.option_buttons[i].config(text=option, bg="SystemButtonFace", 
                                          state="normal", command=lambda opt=option,
       
                                            btn_idx=i: self.check_answer(opt,btn_idx))
        self.skip_button.config(state="normal")

    def check_answer(self, selected_option, btn_index):
        correct_answer = self.questions[self.current_question]["correct_answer"]

        # Disable all buttons after an answer is selected
        for button in self.option_buttons:
            button.config(state="disabled")
            
        if selected_option == correct_answer:
            self.score += 10
            self.score_label.config(text=f"Score: {self.score}")
            if btn_index is not None:
                self.option_buttons[btn_index].config(bg="green", fg="black")  # Highlight the correct answer
        
        elif selected_option == "skip":
            for i, option in enumerate(self.questions[self.current_question]["options"]):
                if option == correct_answer:
                    self.option_buttons[i].config(bg="green", fg="black")  # Highlight the correct answer
                    break
            
            # Disable all buttons after skipping
            for button in self.option_buttons:
                button.config(state="disabled")

            # Disable skip to prevent further skipping
            self.skip_button.config(state="disabled")

        # If the answer is incorrect, highlight the selected button in red        
        else:
            if btn_index is not None:
                self.option_buttons[btn_index].config(bg="red")
            # Highlight the incorrect answer
            for i, option in enumerate(self.questions[self.current_question]["options"]):
                if option == correct_answer:
                    self.option_buttons[i].config(bg="green")
                    break

        # update score and move to next question     
        self.current_question += 1
        if self.current_question >= len(self.questions):
            self.root.after(1300, lambda: self.end_quiz())
        else:
            self.root.after(1300, self.show_question)

    def next_question(self):
        """Function to move to the next question."""
        self.current_question += 1
        if self.current_question >= len(self.questions):
           self.end_quiz()
        # reset button visuals then show the next question
        for button in self.option_buttons:
            button.config(bg="SystemButtonFace", state="normal")
        
        self.update_score_label()
        self.show_question()

    def update_score_label(self):
        self.score_label.config(text=f"Score: {self.score}")
    
    def update_timer(self):
        if self.time_left > 0:
            self.time_left -= 1
            self.timer_label.config(text=f"Timer: {self.time_left}s")
            self.quiz_window.after(1600, self.update_timer)
        else:
            messagebox.showinfo("Time's up :(", "Thank" 
            "you for playing the quiz!")
            self.quiz_window.after(1000, self.end_quiz)
    
    
    def end_quiz(self):
        """Function to end the quiz and show the final score."""
        # Function to end the quiz and show the final score
        messagebox.showinfo("Quiz Over!", 
                            f"Your final score is: {self.score} / {10*len(self.questions)}")
        
        def retry():
            self.root.after(1000, self.retry)
            retry = messagebox.askyesno("Play Again?", 
                            "Would you like to play again?")
            self.quiz_window.destroy()
            
            if retry:
                self.current_question = 0
                self.score = 0
                self.time_left = 80
                self.load_questions()
                self.name_entry.delete(0, tk.END)
                self.category = None  
                self.root.deiconify()
            else:
                self.root.destroy()
        self.root.after(1200, retry)
    

if __name__ == "__main__":
    root = tk.Tk()
    app = TriviaQuiz(root)
    root.mainloop()
